unit uTestImportadorTabelas;
{
  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.
}

interface

uses
  TestFramework,
  uProduto,
  uImportadorTabelas,
  uProdutoTributacao,
  System.Types,
  uRepositorioProdutoTributacao,
  uRepositorioProduto,
  System.SysUtils,
  System.Generics.Collections,
  System.IOUtils,
  uLogErro,
  uConexaoBanco,
  uConstantesBaseDados,
  FireDAC.Comp.Client,
  uArquivoCSV,
  uConstantesGerais,
  System.Classes,
  Data.DB,
  Winapi.Windows,
  Datasnap.DBClient,
  uConfiguracao,
  uVariaveisGlobais;

type
  // Test methods for class TImportadorTabelas
  TestTImportadorTabelas = class(TTestCase)
  strict private
    FImportadorTabelas: TImportadorTabelas;
    FDiretorioTeste: string;
    FConexaoBanco: TConexaoBanco;
    FRepositorioProduto: TRepositorioProduto;
    FRepositorioProdutoTributacao: TRepositorioProdutoTributacao;
    FProdutoCDS: TClientDataSet;
    FProdutoTributacaoCDS: TClientDataSet;

    /// <summary>
    /// Cria um banco de dados de teste em memória.
    /// </summary>
    procedure CriarBancoDeDadosDeTeste;

    /// <summary>
    /// Exclui o banco de dados de teste em memória.
    /// </summary>
    procedure ExcluirBancoDeDadosDeTeste;

    /// <summary>
    /// Insere dados de produto e tributação para teste.
    /// </summary>
    procedure InserirDadosDeTeste;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published

    /// <summary>
    /// Testa a importação de todas as tabelas a partir de arquivos CSV.
    /// </summary>
    procedure TestImportarTodasTabelas;

  end;

implementation

uses
  System.StrUtils;

procedure TestTImportadorTabelas.SetUp;
begin
  // Inicializa o diretório de testes
  FDiretorioTeste := TPath.Combine(TDirectory.GetCurrentDirectory, 'testes_importador');
  if not TDirectory.Exists(FDiretorioTeste) then
    TDirectory.CreateDirectory(FDiretorioTeste);

  // Carrega a configuração do banco de dados
  CarregarConfiguracao;
  FConexaoBanco := gConexaoBanco;
  FConexaoBanco.AbrirConexao;

  FRepositorioProduto := TRepositorioProduto.Create(FConexaoBanco);
  FRepositorioProdutoTributacao := TRepositorioProdutoTributacao.Create(FConexaoBanco.Conexao);
  FImportadorTabelas := TImportadorTabelas.Create;

  // Inicializa os ClientDataSets
  FProdutoCDS := TClientDataSet.Create(nil);
  //FProdutoCDS.Connection := FConexaoBanco.Conexao; // Removido
  FProdutoTributacaoCDS := TClientDataSet.Create(nil);
  //FProdutoTributacaoCDS.Connection := FConexaoBanco.Conexao; // Removido

  // Cria um banco de dados de teste
  CriarBancoDeDadosDeTeste;

  // Insere dados de teste
  InserirDadosDeTeste;
end;

procedure TestTImportadorTabelas.TearDown;
begin
  // Libera os recursos
  FImportadorTabelas.Free;
  FImportadorTabelas := nil;
  FRepositorioProduto.Free;
  FRepositorioProduto := nil;
  FRepositorioProdutoTributacao.Free;
  FRepositorioProdutoTributacao := nil;
  FConexaoBanco.FecharConexao;
  FConexaoBanco.Free;
  FConexaoBanco := nil;

  // Libera os ClientDataSets
  FProdutoCDS.Free;
  FProdutoCDS := nil;
  FProdutoTributacaoCDS.Free;
  FProdutoTributacaoCDS := nil;

  // Exclui o banco de dados de teste
  ExcluirBancoDeDadosDeTeste;

  // Limpa o diretório de testes após a execução dos testes
  if TDirectory.Exists(FDiretorioTeste) then
  begin
    for var NomeArquivo in TDirectory.GetFiles(FDiretorioTeste) do
      TFile.Delete(NomeArquivo);
    TDirectory.Delete(FDiretorioTeste);
  end;
end;

procedure TestTImportadorTabelas.CriarBancoDeDadosDeTeste;
begin
  // Cria tabelas em memória usando TClientDataSet
  FProdutoCDS.Close;
  FProdutoCDS.FieldDefs.Clear;
  FProdutoCDS.FieldDefs.Add('CODIGO', ftInteger, 0, True);
  FProdutoCDS.FieldDefs.Add('DESCRICAO', ftString, 255, False);
  FProdutoCDS.FieldDefs.Add('NCM', ftString, 20, False);
  FProdutoCDS.CreateDataSet;
  FProdutoCDS.Open;

  FProdutoTributacaoCDS.Close;
  FProdutoTributacaoCDS.FieldDefs.Clear;
  FProdutoTributacaoCDS.FieldDefs.Add('CODIGO_PRODUTO', ftInteger, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('UF', ftString, 2, False);
  FProdutoTributacaoCDS.FieldDefs.Add('EX', ftInteger, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('TIPO', ftInteger, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('TRIBNACIONALFEDERAL', ftFloat, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('TRIBIMPORTADOSFEDERAL', ftFloat, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('TRIBESTADUAL', ftFloat, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('TRIBMUNICIPAL', ftFloat, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('VIGENCIA_INICIO', ftDate, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('VIGENCIA_FIM', ftDate, 0, False);
  FProdutoTributacaoCDS.FieldDefs.Add('CHAVE', ftString, 255, False);
  FProdutoTributacaoCDS.FieldDefs.Add('VERSAO', ftString, 20, False);
  FProdutoTributacaoCDS.FieldDefs.Add('FONTE', ftString, 255, False);
  FProdutoTributacaoCDS.CreateDataSet;
  FProdutoTributacaoCDS.Open;
end;

procedure TestTImportadorTabelas.ExcluirBancoDeDadosDeTeste;
begin
  // Como estamos usando um banco de dados em memória, não há necessidade de excluir um arquivo.
  // No entanto, se você estiver usando um arquivo de banco de dados, você pode excluí-lo aqui.
end;

procedure TestTImportadorTabelas.InserirDadosDeTeste;
var
  Produto: TProduto;
  ProdutoTributacao: TProdutoTributacao;
begin


  // Insere produtos de teste
  Produto := TProduto.Create(100000, 'Produto A', '12345678');
  FRepositorioProduto.Inserir(Produto);
  Produto.Free;

  Produto := TProduto.Create(200000, 'Produto B', '98765432');
  FRepositorioProduto.Inserir(Produto);
  Produto.Free;

  // Insere tributações de teste
  ProdutoTributacao := TProdutoTributacao.Create;
  ProdutoTributacao.CODIGOPRODUTO := 100000;
  ProdutoTributacao.UF := 'SP';
  ProdutoTributacao.EX := 1;
  ProdutoTributacao.TIPO := 1;
  ProdutoTributacao.TRIBNACIONALFEDERAL := 10.00;
  ProdutoTributacao.TRIBIMPORTADOSFEDERAL := 5.00;
  ProdutoTributacao.TRIBESTADUAL := 2.00;
  ProdutoTributacao.TRIBMUNICIPAL := 1.00;
  ProdutoTributacao.VIGENCIAINICIO := EncodeDate(2023, 1, 1);
  ProdutoTributacao.VIGENCIAFIM := EncodeDate(2023, 12, 31);
  ProdutoTributacao.CHAVE := 'CHA123';
  ProdutoTributacao.VERSAO := '1.0';
  ProdutoTributacao.FONTE := 'FONTE1';
  FRepositorioProdutoTributacao.InserirProdutoTributacao(ProdutoTributacao);
  ProdutoTributacao.Free;

  ProdutoTributacao := TProdutoTributacao.Create;
  ProdutoTributacao.CODIGOPRODUTO := 200000;
  ProdutoTributacao.UF := 'RJ';
  ProdutoTributacao.EX := 2;
  ProdutoTributacao.TIPO := 2;
  ProdutoTributacao.TRIBNACIONALFEDERAL := 20.00;
  ProdutoTributacao.TRIBIMPORTADOSFEDERAL := 10.00;
  ProdutoTributacao.TRIBESTADUAL := 4.00;
  ProdutoTributacao.TRIBMUNICIPAL := 2.00;
  ProdutoTributacao.VIGENCIAINICIO := EncodeDate(2023, 1, 2);
  ProdutoTributacao.VIGENCIAFIM := EncodeDate(2023, 2, 28);
  ProdutoTributacao.CHAVE := 'CHA456';
  ProdutoTributacao.VERSAO := '2.0';
  ProdutoTributacao.FONTE := 'FONTE2';
  FRepositorioProdutoTributacao.InserirProdutoTributacao(ProdutoTributacao);
  ProdutoTributacao.Free;
end;

procedure TestTImportadorTabelas.TestImportarTodasTabelas;
var
  retorno: Boolean;
begin
  // Chama o método para importar todas as tabelas
  retorno := FImportadorTabelas.ImportarTabelas;

  Check(retorno, 'Produto com código 1 não foi encontrado.');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTImportadorTabelas.Suite);
end.

