unit uTestuCalculoTributosProduto;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uCalculoTributosProduto, uProduto, uProdutoTributacao,
  uRepositorioProduto, uRepositorioProdutoTributacao, uConexaoBanco,
  System.SysUtils, System.Types, Classes, Variants, uConfiguracao,
  uVariaveisGlobais, uArquivoCSVLinhaProduto;

const
  CODIGO_PRODUTO_1 = 100000;
  CODIGO_PRODUTO_2 = 200000;

type
  // Test methods for class TCalculoTributosProduto

  TestTCalculoTributosProduto = class(TTestCase)
  strict private
    FCalculoTributosProduto: TCalculoTributosProduto;
    FConexaoBanco: TConexaoBanco;
    FRepositorioProduto: TRepositorioProduto;
    FRepositorioProdutoTributacao: TRepositorioProdutoTributacao;
    ListaDeProdutos: TList;
    ListaDeTributacoes: TList;
  public
    /// <summary>
    /// Método executado antes de cada teste.
    /// </summary>
    procedure SetUp; override;

    /// <summary>
    /// Método executado após cada teste.
    /// </summary>
    procedure TearDown; override;
  published

    /// <summary>
    /// Método de teste para cenário de sucesso.
    /// </summary>
    procedure TestCalcularTributosProduto_Sucesso;

    /// <summary>
    /// Método de teste para produto não encontrado.
    /// </summary>
    procedure TestCalcularTributosProduto_ProdutoNaoEncontrado;

    /// <summary>
    /// Método de teste para tributação não encontrada.
    /// </summary>
    procedure TestCalcularTributosProduto_TributacaoNaoEncontrada;

    /// <summary>
    /// Método de teste para valor do produto igual a zero.
    /// </summary>
    procedure TestCalcularTributosProduto_ValorZero;
  end;

implementation

procedure TestTCalculoTributosProduto.SetUp;
var
  Produto: TProduto;
  ProdutoTributacao: TProdutoTributacao;
begin
  // Carrega a configuração do banco de dados
  CarregarConfiguracao;
  FConexaoBanco := gConexaoBanco; // Usa a conexão global configurada

  // Cria instâncias dos repositórios
  FRepositorioProduto := TRepositorioProduto.Create(FConexaoBanco);
  FRepositorioProdutoTributacao := TRepositorioProdutoTributacao.Create(FConexaoBanco.Conexao);

  // Cria instância da classe a ser testada
  FCalculoTributosProduto := TCalculoTributosProduto.Create(FConexaoBanco);

  // Popula o banco de dados com dados de teste (use TList para facilitar a limpeza)
  ListaDeProdutos := TList.Create;
  ListaDeTributacoes := TList.Create;

  // Produto 1
  Produto := TProduto.Create;
  Produto.Codigo := CODIGO_PRODUTO_1;
  Produto.Descricao := 'Produto Teste 1';
  Produto.Ncm := '12345678';
  FRepositorioProduto.Inserir(Produto);
  ListaDeProdutos.Add(Produto);

  // Produto 2
  Produto := TProduto.Create;
  Produto.Codigo := CODIGO_PRODUTO_2;
  Produto.Descricao := 'Produto Teste 2';
  Produto.Ncm := '98765432';
  FRepositorioProduto.Inserir(Produto);
  ListaDeProdutos.Add(Produto);

  // Tributação para o Produto 1 em SP
  ProdutoTributacao := TProdutoTributacao.Create;
  ProdutoTributacao.CODIGOPRODUTO := CODIGO_PRODUTO_1;
  ProdutoTributacao.UF := 'SP';
  ProdutoTributacao.TRIBNACIONALFEDERAL := 10.0;
  ProdutoTributacao.TRIBIMPORTADOSFEDERAL := 5.0;
  ProdutoTributacao.TRIBESTADUAL := 2.0;
  ProdutoTributacao.TRIBMUNICIPAL := 1.0;
  ProdutoTributacao.VIGENCIAINICIO := EncodeDate(2024, 1, 1);
  ProdutoTributacao.VIGENCIAFIM := EncodeDate(2024, 12, 31);
  ProdutoTributacao.CHAVE := 'CHA123';
  ProdutoTributacao.VERSAO := '1.0';
  ProdutoTributacao.FONTE := 'Fonte Teste';
  FRepositorioProdutoTributacao.InserirProdutoTributacao(ProdutoTributacao);
  ListaDeTributacoes.Add(ProdutoTributacao);

  // Tributação para o Produto 2 em RJ
  ProdutoTributacao := TProdutoTributacao.Create;
  ProdutoTributacao.CODIGOPRODUTO := CODIGO_PRODUTO_2;
  ProdutoTributacao.UF := 'RJ';
  ProdutoTributacao.TRIBNACIONALFEDERAL := 8.0;
  ProdutoTributacao.TRIBIMPORTADOSFEDERAL := 3.0;
  ProdutoTributacao.TRIBESTADUAL := 4.0;
  ProdutoTributacao.TRIBMUNICIPAL := 2.0;
  ProdutoTributacao.VIGENCIAINICIO := EncodeDate(2024, 1, 1);
  ProdutoTributacao.VIGENCIAFim := EncodeDate(2024, 12, 31);
  ProdutoTributacao.CHAVE := 'CHA456';
  ProdutoTributacao.VERSAO := '1.0';
  ProdutoTributacao.FONTE := 'Fonte Teste';
  FRepositorioProdutoTributacao.InserirProdutoTributacao(ProdutoTributacao);
  ListaDeTributacoes.Add(ProdutoTributacao);
end;

procedure TestTCalculoTributosProduto.TearDown;
var
  Produto: TProduto;
  ProdutoTributacao: TProdutoTributacao;
begin
  // Limpa o banco de dados (remove os dados de teste)
  for ProdutoTributacao in ListaDeTributacoes do
    FRepositorioProdutoTributacao.ExcluirProdutoTributacao(ProdutoTributacao.CODIGOPRODUTO);
  ListaDeTributacoes.Free;

  for Produto in ListaDeProdutos do
    FRepositorioProduto.Excluir(Produto.Codigo);
  ListaDeProdutos.Free;

  // Libera as instâncias
  FCalculoTributosProduto.Free;
  FRepositorioProduto.Free;
  FRepositorioProdutoTributacao.Free;
  // A conexão com o banco é global e será liberada em outro lugar, não aqui.
  FConexaoBanco.Free;
end;

procedure TestTCalculoTributosProduto.TestCalcularTributosProduto_ProdutoNaoEncontrado;
var
  Resultado: TArquivoCSVLinhaProduto;
begin
  Resultado := FCalculoTributosProduto.CalcularTributosProduto(999, 'SP', 100.00);
  Check(Assigned(Resultado), 'O resultado não deve ser nulo.');
  Check(not VarIsEmpty(Resultado.Mensagem), 'A mensagem não deve estar vazia.');
  Check(Resultado.Mensagem = 'Produto não encontrado', 'Mensagem de erro incorreta.');
  Resultado.Free;
end;

procedure TestTCalculoTributosProduto.TestCalcularTributosProduto_Sucesso;
var
  Resultado: TArquivoCSVLinhaProduto;
  ValorProduto: Currency;
begin
  ValorProduto := 100.00;
  Resultado := FCalculoTributosProduto.CalcularTributosProduto(CODIGO_PRODUTO_1, 'SP', ValorProduto);
  Check(Assigned(Resultado), 'O resultado não deve ser nulo.');
  Check(not VarIsEmpty(Resultado.Mensagem), 'A mensagem deve estar vazia em caso de sucesso.');
  Check(Resultado.CodigoProduto = CODIGO_PRODUTO_1, 'Código do produto incorreto.');
  Check(Resultado.Descricao = 'Produto Teste 1', 'Descrição do produto incorreta.');
  Check(Resultado.CodigoNCM = 12345678, 'Código NCM incorreto.');
  Check(Resultado.UF = 'SP', 'UF incorreta.');
  Check(Resultado.ValorTribNacionalFederal = 10.00, 'Valor do tributo nacional federal incorreto.');
  Check(Resultado.ValorTribImportadosFederal = 5.00, 'Valor do tributo de importados federal incorreto.');
  Check(Resultado.ValorTribEstadual = 2.00, 'Valor do tributo estadual incorreto.');
  Check(Resultado.ValorTribMunicipal = 1.00, 'Valor do tributo municipal incorreto.');
  Check(Resultado.SomaTributacaoValor = 18.00, 'Soma da tributação incorreta.');
  Check(Resultado.ValorLiquido = 82.00, 'Valor líquido incorreto.');
  Resultado.Free;

  ValorProduto := 200;
  Resultado := FCalculoTributosProduto.CalcularTributosProduto(CODIGO_PRODUTO_2, 'RJ', ValorProduto);
  Check(Assigned(Resultado), 'O resultado não deve ser nulo.');
  Check(not VarIsEmpty(Resultado.Mensagem), 'A mensagem deve estar vazia em caso de sucesso.');
  Check(Resultado.CodigoProduto = CODIGO_PRODUTO_2, 'Código do produto incorreto.');
  Check(Resultado.Descricao = 'Produto Teste 2', 'Descrição do produto incorreta.');
  Check(Resultado.CodigoNCM = 98765432, 'Código NCM incorreto.');
  Check(Resultado.UF = 'RJ', 'UF incorreta.');
  Check(Resultado.ValorTribNacionalFederal = 16.00, 'Valor do tributo nacional federal incorreto.');
  Check(Resultado.ValorTribImportadosFederal = 6.00, 'Valor do tributo de importados federal incorreto.');
  Check(Resultado.ValorTribEstadual = 8.00, 'Valor do tributo estadual incorreto.');
  Check(Resultado.ValorTribMunicipal = 4.00, 'Valor do tributo municipal incorreto.');
  Check(Resultado.SomaTributacaoValor = 34.00, 'Soma da tributação incorreta.');
  Check(Resultado.ValorLiquido = 166.00, 'Valor líquido incorreto.');
  Resultado.Free;
end;

procedure TestTCalculoTributosProduto.TestCalcularTributosProduto_TributacaoNaoEncontrada;
var
  Resultado: TArquivoCSVLinhaProduto;
begin
  Resultado := FCalculoTributosProduto.CalcularTributosProduto(CODIGO_PRODUTO_1, 'RJ', 100.00);
  Check(Assigned(Resultado), 'O resultado não deve ser nulo.');
  Check(not VarIsEmpty(Resultado.Mensagem), 'A mensagem não deve estar vazia.');
  Check(Resultado.Mensagem = 'Tributação não encontrada para o produto e UF informados', 'Mensagem de erro incorreta.');
  Resultado.Free;
end;

procedure TestTCalculoTributosProduto.TestCalcularTributosProduto_ValorZero;
var
  Resultado: TArquivoCSVLinhaProduto;
begin
  Resultado := FCalculoTributosProduto.CalcularTributosProduto(CODIGO_PRODUTO_1, 'SP', 0.00);
  Check(Assigned(Resultado), 'O resultado não deve ser nulo.');
  Check(not VarIsEmpty(Resultado.Mensagem), 'A mensagem deve estar vazia.');
  Check(Resultado.ValorLiquido = 0.00, 'Valor líquido incorreto para valor zero.');
  Check(Resultado.SomaTributacaoPorcentagem = 0, 'Porcentagem de tributação incorreta para valor zero');
  Resultado.Free;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCalculoTributosProduto.Suite);
end.

